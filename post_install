#!/bin/bash

set -euo pipefail

# Improved error handling function
handle_error() {
    local line_number="$1"
    local line_content
    line_content=$(sed -n "${line_number}p" "$0")
    echo "An error occurred at line ${line_number}: ${line_content}. Exiting..." >&2
    logger -t "$(basename "$0")" "An error occurred at line ${line_number}: ${line_content}. Exiting..."
    exit 1
}

# Setup a trap to catch errors and execute handle_error function
trap 'handle_error $LINENO' ERR

usage() {
    cat <<EOF
Usage: $0 [options]
Options:
  -p  Install pacman packages
  -r  Install paru packages
  -s  Install suckless software
  -c  Copy dotfiles
  -a  Run all options
  -t  Prepare touchpad
  -g  Git configuration
  -k  Keyboard backlight
  -d  Download softwares
  -b  Secure boot
  -m  Change GRUB
  -n  Set up systemd resolved
EOF
    exit 1
}

install_pacman_packages() {
  local packages=(
    ttf-font-awesome tmux dmenu xclip noto-fonts-emoji mpv yt-dlp ttf-cascadia-code gdb scrot pavucontrol python-pip
    xorg xorg-xinput xorg-xinit slock dconf wget libx11 libxinerama libxft freetype2 fuse openssh dnsmasq zip
    libldap gnutls mpg123 openal v4l-utils libpulse python-pyusb
    libpulse libgpg-error alsa-plugins alsa-lib libjpeg-turbo
    sqlite libxcomposite libxinerama libgcrypt xdotool
    ncurses ocl-icd libxslt libva gtk3 linux-headers firefox
    gst-plugins-base-libs torbrowser-launcher
    unrar sbctl os-prober
  )
  pacman -S --noconfirm --needed "${packages[@]}"
}

install_paru_packages() {
    if ! command -v paru &>/dev/null; then
        sudo -u "$SUDO_USER" git clone https://aur.archlinux.org/paru.git
        (cd paru && sudo -u "$SUDO_USER" makepkg -si --noconfirm --needed)
    fi
    rm -f /usr/share/applications/microsoft-edge.desktop
    sudo -u "$SUDO_USER" paru -S --noconfirm --needed visual-studio-code-bin microsoft-edge-stable-bin ibus-bamboo linux-wifi-hotspot nm-vpngate-git lf ripgrep
    cp microsoft-edge.desktop /usr/share/applications/
    sudo -u "$SUDO_USER" xdg-mime default microsoft-edge.desktop x-scheme-handler/http
    sudo -u "$SUDO_USER" xdg-mime default microsoft-edge.desktop x-scheme-handler/https
}

insert_sed_command_before_make() {
    local sw="$1"
    local build_line_number
    build_line_number=$(grep -n '^build() {' "${sw}/PKGBUILD" | cut -d: -f1)
    if [[ -z "$build_line_number" ]]; then
        echo "Build line number not found"
        return 1
    fi
    local make_line_number
    make_line_number=$(tail -n +"$((build_line_number+1))" "${sw}/PKGBUILD" | grep -n '^ *make' | head -n 1 | cut -d: -f1)
    if [[ -z "$make_line_number" ]]; then
        echo "Make line not found after build() {"
        return 1
    fi
    local insert_line_number=$((make_line_number + build_line_number))
    local sed_command=""
    case "$sw" in
        dwm|slstatus-git)
            sed_command="sed -E -i 's#^CFLAGS\\s*=#CFLAGS = -O3 -march=native#' \$(find . -name config.mk)"
            ;;
        st)
            sed_command="sed -E -i 's#^STCFLAGS\\s*=#STCFLAGS = -O3 -march=native#' \$(find . -name config.mk)"
            ;;
    esac

    # add to sed_command a sed command to remove all -Os
    sed_command="${sed_command} && sed -E -i 's#-Os##g' \$(find . -name config.mk)"

    sed -i "${insert_line_number}i\\  ${sed_command}" "${sw}/PKGBUILD"
}

install_suckless_software() {
    local softwares=("dwm" "st" "slstatus-git")
    for sw in "${softwares[@]}"; do
        if [[ ! -d $sw ]]; then
            sudo -u "$SUDO_USER" paru -G "${sw}"
        else
            echo "$sw already installed - skipping download"
        fi
        cp "${sw}-config.h" "${sw}/config.h"
        insert_sed_command_before_make "${sw}"
        (cd "${sw}" && sudo -u "$SUDO_USER" makepkg -si --noconfirm --needed --skipinteg -f)
    done
}

copy_dotfiles() {
    find . -maxdepth 1 -type f -name ".*" ! -name ".bashrc" ! -name ".gitignore" -exec cp -u {} "/home/$SUDO_USER/" \;
    if ! grep -q MYCONFIG "/home/$SUDO_USER/.bashrc"; then
        cat .bashrc >> "/home/$SUDO_USER/.bashrc"
    else
        echo ".bashrc already appended - skipping"
    fi
}

prepare_touchpad() {
    mkdir -p /usr/local/bin
    cp touchpad-toggle /usr/local/bin/
    sed -i "s/__USERNAME__/$SUDO_USER/g" 01-touchpad.rules
    cp 01-touchpad.rules /etc/udev/rules.d/
    cp 01-libinput.conf /etc/X11/xorg.conf.d/
    udevadm control --reload-rules && udevadm trigger
}

download_softwares() {
    runuser -l "$SUDO_USER" -c "bash -c \"
    mkdir -p ~/Downloads
    cd ~/Downloads
    rm -rf Discord discord-*.tar.gz
    
    curl -OJLs https://downloader.cursor.sh/linux/appImage/x64
    curl -L -o discord.tar.gz https://discord.com/api/download?platform=linux&format=tar.gz
    tar xzf discord.tar.gz
    mkdir -p ~/.local/bin
    chmod u+x cursor-*x86_64.AppImage
    ln -sf ~/Downloads/Discord/Discord ~/.local/bin/discord
    \"
    "
    ln -sf "/home/$SUDO_USER/Downloads/cursor-"*x86_64.AppImage /usr/local/bin/cursor
}

git_config() {
    sudo -u "$SUDO_USER" git config --global user.email "nhkduy201@gmail.com"
    sudo -u "$SUDO_USER" git config --global user.name "nhkduy201"
    sudo -u "$SUDO_USER" git config --global core.editor "nvim"
}

keyboard_backlight() {
    sudo -u "$SUDO_USER" git clone https://github.com/imShara/l5p-kbl
    sed -i 's/PRODUCT = 0xC965/PRODUCT = 0xC975/' l5p-kbl/l5p_kbl.py
}

configure_check_network() {
    if ping -q -c 1 -W 1 8.8.8.8 >/dev/null; then
        return
    fi
    local ssid
    ssid=$(cat "/home/$SUDO_USER/wifi_ssid")
    local wifi_password
    wifi_password=$(cat "/home/$SUDO_USER/wifi_password")

    nmcli device wifi connect "$ssid" password "$wifi_password"
    if ! nmcli -t -f active,ssid dev wifi | grep '^yes:' || ! ping -c 1 google.com &> /dev/null; then
        echo "Network connection failed. Please check your settings."
        exit 1
    fi
}

run_all_options() {
    local done_file="/var/lib/$SUDO_USER-post-install.done"
    if [ -f "$done_file" ]; then
        echo "Post-install already completed. Exiting."
        exit 0
    fi
    configure_check_network
    install_pacman_packages
    install_paru_packages
    install_suckless_software
    copy_dotfiles
    prepare_touchpad
    git_config
    keyboard_backlight
    download_softwares
    change_grub
    secure_boot
    setup_systemd_resolved
    touch "$done_file"
}

setup_systemd_resolved() {
    systemctl enable systemd-resolved --now
    ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

    local config_file="/etc/systemd/resolved.conf"
    local config_lines="
DNS=8.8.8.8 8.8.4.4 2001:4860:4860::8888 2001:4860:4860::8844
FallbackDNS=1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001
DNSOverTLS=yes
"

    echo "$config_lines" | tee -a "$config_file" >/dev/null

    systemctl restart systemd-resolved
}

change_grub() {
    local grub_config="/etc/default/grub"
    sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=1/' "$grub_config"
    grub-mkconfig -o /boot/grub/grub.cfg
}

secure_boot() {
    sbctl create-keys
    sbctl enroll-keys -m
    sbctl sign -s /boot/vmlinuz-linux
    if [[ -d /run/systemd/system && -d /boot/loader ]]; then
        sbctl sign -s -o /usr/lib/systemd/boot/efi/systemd-bootx64.efi.signed /usr/lib/systemd/boot/efi/systemd-bootx64.efi
        bootctl install
    elif [ -d /boot/grub ]; then
        sbctl sign -s /boot/EFI/BOOT/BOOTX64.EFI
        sbctl sign -s /boot/grub/x86_64-efi/grub.efi
        sbctl sign -s /boot/grub/x86_64-efi/core.efi
    fi
    sbctl verify
    sbctl status
}

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" >&2
   exit 1
fi

if [[ $# -eq 0 ]]; then
    usage
fi

while getopts ":prscatdgkbmn" opt; do
    case "${opt}" in
        p) install_pacman_packages ;;
        r) install_paru_packages ;;
        s) install_suckless_software ;;
        c) copy_dotfiles ;;
        a) run_all_options ;;
        t) prepare_touchpad ;;
        g) git_config ;;
        k) keyboard_backlight ;;
        d) download_softwares ;;
        b) secure_boot ;;
        m) change_grub ;;
        n) setup_systemd_resolved ;;
        *) usage ;;
    esac
done
