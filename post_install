#!/bin/bash

# Improved error handling function
handle_error() {
    local line_content=$(sed -n "${LINENO}p" "$0")
    echo "An error occurred at line $LINENO: $line_content. Exiting..." >&2
    logger -t "$(basename $0)" "An error occurred at line $LINENO: $line_content. Exiting..." 
    exit 1
}

# Setup a trap to catch errors and execute handle_error function
trap 'handle_error $LINENO' ERR

usage() {
  cat <<EOF
Usage: $0 [options] [wm_choice]
Options:
  -p  Install pacman packages
  -r  Install AUR packages
  -s  Install suckless software (DWM only)
  -c  Copy dotfiles
  -a  Run all options
  -t  Prepare touchpad
  -g  Git configuration
  -k  Keyboard backlight
  -d  Download softwares
  -b  Secure boot
  -m  Change GRUB
  -n  Set up systemd resolved
  -h  Disable telemetry for an-anime-game-launcher-bin

wm_choice: 'dwm' or 'i3'
EOF
  exit 1
}

install_pacman_packages() {
  local common_packages=(
    ttf-font-awesome tmux dmenu xclip noto-fonts-emoji mpv yt-dlp ttf-cascadia-code gdb scrot pavucontrol python-pip
    xorg xorg-xinput xorg-xinit slock dconf wget libx11 libxinerama libxft freetype2 fuse openssh dnsmasq zip
    nvidia-dkms nvidia-utils lib32-nvidia-utils nvidia-settings opencl-nvidia vulkan-icd-loader lib32-vulkan-icd-loader lib32-mesa
    vulkan-radeon lib32-vulkan-radeon wine-staging giflib lib32-giflib libpng lib32-libpng libldap lib32-libldap gnutls
    lib32-gnutls lutris steam mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils libpulse python-pyusb
    lib32-libpulse libgpg-error lib32-libgpg-error alsa-plugins lib32-alsa-plugins alsa-lib lib32-alsa-lib libjpeg-turbo
    sqlite lib32-sqlite libxcomposite lib32-libxcomposite libxinerama lib32-libgcrypt libgcrypt lib32-libxinerama xdotool
    ncurses lib32-ncurses ocl-icd lib32-ocl-icd libxslt lib32-libxslt libva lib32-libva gtk3 linux-headers firefox
    lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader torbrowser-launcher
    unrar sbctl os-prober
  )

  local i3_packages=(
    i3-wm i3status i3blocks i3lock
  )

  if [ "$WM_CHOICE" = "dwm" ]; then
    packages=("${common_packages[@]}")
  else
    packages=("${common_packages[@]}" "${i3_packages[@]}")
  fi

  pacman -S --noconfirm --needed "${packages[@]}"
}

install_aur_packages() {
  local aur_helper=""
  if ! command -v paru &>/dev/null; then
    sudo -u $SUDO_USER git clone https://aur.archlinux.org/paru.git
    (cd paru && sudo -u $SUDO_USER makepkg -s --noconfirm --needed && pacman -U --noconfirm *.pkg.tar.zst)
    if ! command -v paru &>/dev/null; then
      echo "Paru installation failed. Falling back to yay."
      sudo -u $SUDO_USER git clone https://aur.archlinux.org/yay.git
      (cd yay && sudo -u $SUDO_USER makepkg -s --noconfirm --needed && pacman -U --noconfirm *.pkg.tar.zst)
      aur_helper="yay"
    else
      aur_helper="paru"
    fi
  else
    aur_helper="paru"
  fi

  local common_aur_packages=(
    # visual-studio-code-bin  # commented out as Cursor editor is used for now
    microsoft-edge-stable-bin ibus-bamboo linux-wifi-hotspot nm-vpngate-git lf ripgrep
  )

  local i3_aur_packages=(
    i3-gaps
  )

  if [ "$WM_CHOICE" = "dwm" ]; then
    aur_packages=("${common_aur_packages[@]}")
  else
    aur_packages=("${common_aur_packages[@]}" "${i3_aur_packages[@]}")
  fi

  rm -f /usr/share/applications/microsoft-edge.desktop
  sudo -u $SUDO_USER $aur_helper -S --noconfirm --needed "${aur_packages[@]}"
  cp microsoft-edge.desktop /usr/share/applications/
  sudo -u $SUDO_USER xdg-mime default microsoft-edge.desktop x-scheme-handler/http
  sudo -u $SUDO_USER xdg-mime default microsoft-edge.desktop x-scheme-handler/https
}

insert_sed_command_before_make() {
    local sw="$1"
    local build_line_number=$(grep -n '^build() {' "${sw}/PKGBUILD" | cut -d: -f1)
    if [[ -z "$build_line_number" ]]; then
        echo "Build line number not found"
        return 1
    fi
    local make_line_number=$(tail -n +"$((build_line_number+1))" "${sw}/PKGBUILD" | grep -n '^ *make' | head -n 1 | cut -d: -f1)
    if [[ -z "$make_line_number" ]]; then
        echo "Make line not found after build() {"
        return 1
    fi
    local insert_line_number=$(( make_line_number + build_line_number ))
    sed_command=""
    if [[ $sw == "dwm" ]]; then
        sed_command="sed -E -i 's#^CFLAGS\\\\s*=#CFLAGS = -O3 -march=native#' \$(find . -name config.mk)"
    elif [[ $sw == "st" ]]; then
        sed_command="sed -E -i 's#^STCFLAGS\\\\s*=#STCFLAGS = -O3 -march=native#' \$(find . -name config.mk)"
    elif [[ $sw == "slstatus-git" ]]; then
        sed_command="sed -E -i 's#^CFLAGS\\\\s*=#CFLAGS = -O3 -march=native#' \$(find . -name config.mk)"
    fi

    # add to sed_command a sed command to remove all -Os
    sed_command="${sed_command} && sed -E -i 's#-Os##g' \$(find . -name config.mk)"

    sed -i "${insert_line_number}i\  ${sed_command}" "${sw}/PKGBUILD"
}

install_suckless_software() {
  local softwares=("dwm" "st" "slstatus-git")
  for sw in "${softwares[@]}"; do
    if [[ ! -d $sw ]]; then
      sudo -u $SUDO_USER paru -G "${sw}"
    else
      echo "$sw already installed - skipping download"
    fi
    cp "${sw}-config.h" "${sw}/config.h"
    insert_sed_command_before_make "${sw}"
    (cd "${sw}" && sudo -u $SUDO_USER makepkg -s --noconfirm --needed --skipinteg -f && pacman -U --noconfirm *.pkg.tar.zst)
  done
}

copy_dotfiles() {
  find . -maxdepth 1 -type f -name ".*" ! -name ".bashrc" ! -name ".gitignore" -exec cp -u {} /home/$SUDO_USER/ \;
  if ! grep -q MYCONFIG "/home/$SUDO_USER/.bashrc"; then
    cat .bashrc >> /home/$SUDO_USER/.bashrc
  else
    echo ".bashrc already appended - skipping"
  fi
}

prepare_touchpad() {
  mkdir -p /usr/local/bin
  cp touchpad-toggle /usr/local/bin/
  sed -i "s/__USERNAME__/$SUDO_USER/g" 01-touchpad.rules
  cp 01-touchpad.rules /etc/udev/rules.d/
  cp 01-libinput.conf /etc/X11/xorg.conf.d/
  udevadm control --reload-rules && udevadm trigger
}

download_softwares() {
  local PROTONUP_VERSION="2.9.1"
  #local NVIDIA_VERSION="550.54.14"
  #wget -q https://us.download.nvidia.com/XFree86/Linux-x86_64/${NVIDIA_VERSION}/NVIDIA-Linux-x86_64-${NVIDIA_VERSION}.run
  # NVIDIA-Linux-x86_64-${NVIDIA_VERSION}.run
  # sudo ./NVIDIA-Linux-x86_64-${NVIDIA_VERSION}.run -s

  runuser -l $SUDO_USER -c "bash -c \"
  mkdir -p ~/Downloads
  cd ~/Downloads
  rm -rf Discord discord-*.tar.gz ProtonUp-Qt-*-x86_64.AppImage
  wget -q https://github.com/DavidoTek/ProtonUp-Qt/releases/download/v${PROTONUP_VERSION}/ProtonUp-Qt-${PROTONUP_VERSION}-x86_64.AppImage
  
  curl -OJLs https://downloader.cursor.sh/linux/appImage/x64
  curl -L -o discord.tar.gz https://discord.com/api/download?platform=linux&format=tar.gz
  tar xzf discord.tar.gz
  mkdir -p ~/.local/bin
  chmod u+x cursor-*x86_64.AppImage ProtonUp-Qt-${PROTONUP_VERSION}-x86_64.AppImage
  ln -sf ~/Downloads/Discord/Discord ~/.local/bin/discord
  ln -sf ~/Downloads/ProtonUp-Qt-${PROTONUP_VERSION}-x86_64.AppImage ~/.local/bin/protonup-qt
  \"
  "
  ln -sf /home/$SUDO_USER/Downloads/cursor-*x86_64.AppImage /usr/local/bin/cursor
}

git_config() {
  sudo -u $SUDO_USER git config --global user.email "nhkduy201@gmail.com"
  sudo -u $SUDO_USER git config --global user.name "nhkduy201"
  sudo -u $SUDO_USER git config --global core.editor "nvim"
}

keyboard_backlight() {
  sudo -u $SUDO_USER git clone https://github.com/imShara/l5p-kbl
  sed -i 's/PRODUCT = 0xC965/PRODUCT = 0xC975/' l5p-kbl/l5p_kbl.py
}

configure_check_network() {
  local max_attempts=5
  local attempt=1
  local timeout=30

  while [ $attempt -le $max_attempts ]; do
    echo "Attempt $attempt of $max_attempts to establish network connection..."

    # Check if we're already connected to the internet
    if timeout $timeout ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
      echo "Internet connection already established."
      return 0
    fi

    # Check if NetworkManager is running, if not, start it
    if ! systemctl is-active --quiet NetworkManager; then
      echo "NetworkManager is not running. Starting it..."
      systemctl start NetworkManager
      sleep 5
    fi

    # Check if we're connected via Ethernet
    if ip link show | grep -q "state UP" | grep -q "eth"; then
      echo "Ethernet connection detected. Attempting to configure..."
      if nmcli connection up "$(nmcli -t -f NAME connection show --active | grep eth)" >/dev/null 2>&1; then
        sleep 5
        if timeout $timeout ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
          echo "Internet connection established via Ethernet."
          return 0
        fi
      fi
    fi

    # If not connected via Ethernet, try Wi-Fi
    if [ -f "/home/$SUDO_USER/wifi_ssid" ] && [ -f "/home/$SUDO_USER/wifi_password" ]; then
      local ssid=$(cat /home/$SUDO_USER/wifi_ssid)
      local wifi_password=$(cat /home/$SUDO_USER/wifi_password)

      echo "Attempting to connect to Wi-Fi network: $ssid"
      if nmcli device wifi connect "$ssid" password "$wifi_password" >/dev/null 2>&1; then
        sleep 10
        if timeout $timeout ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
          echo "Successfully connected to Wi-Fi network: $ssid"
          return 0
        fi
      fi
    fi

    echo "Failed to establish an internet connection. Retrying in 30 seconds..."
    sleep 30
    attempt=$((attempt + 1))
  done

  echo "Failed to establish an internet connection after $max_attempts attempts."
  echo "The script will continue, but some operations may fail without internet connectivity."
  return 1
}

run_all_options() {
  configure_check_network
  install_pacman_packages
  install_aur_packages
  if [ "$WM_CHOICE" = "dwm" ]; then
    install_suckless_software
  fi
  copy_dotfiles
  prepare_touchpad
  git_config
  keyboard_backlight
  download_softwares
  change_grub
  # secure_boot
  setup_systemd_resolved
  disable_telemetry
}

setup_systemd_resolved() {
  systemctl enable systemd-resolved --now
  ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

  sudo tee -a /etc/systemd/resolved.conf >/dev/null <<EOF
DNS=8.8.8.8 8.8.4.4 2001:4860:4860::8888 2001:4860:4860::8844
FallbackDNS=1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001
DNSOverTLS=yes
EOF

  systemctl restart systemd-resolved
}

change_grub() {
  sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=1/' /etc/default/grub
  grub-mkconfig -o /boot/grub/grub.cfg
}

secure_boot() {
  sbctl create-keys
  sbctl enroll-keys -m
  sbctl sign -s /boot/vmlinuz-linux
  if [[ -d /run/systemd/system && -d /boot/loader ]]; then
    sbctl sign -s -o /usr/lib/systemd/boot/efi/systemd-bootx64.efi.signed /usr/lib/systemd/boot/efi/systemd-bootx64.efi
    bootctl install
  elif [ -d /boot/grub ]; then
    sbctl sign -s /boot/EFI/BOOT/BOOTX64.EFI
    sbctl sign -s /boot/grub/x86_64-efi/grub.efi
    sbctl sign -s /boot/grub/x86_64-efi/core.efi
  fi
  sbctl verify
  sbctl status
}

disable_telemetry() {
  cat <<EOF >> /etc/hosts
## For an-anime-game-launcher-bin
# Global version
0.0.0.0 sg-public-data-api.hoyoverse.com
0.0.0.0 log-upload-os.hoyoverse.com
0.0.0.0 log-upload-os.mihoyo.com
0.0.0.0 overseauspider.yuanshen.com
# Chinese version
0.0.0.0 public-data-api.mihoyo.com
0.0.0.0 log-upload.mihoyo.com
EOF
}

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

# Process window manager choice
WM_CHOICE="${!#}"
if [ "$WM_CHOICE" != "dwm" ] && [ "$WM_CHOICE" != "i3" ]; then
  echo "Error: Invalid window manager choice. Use 'dwm' or 'i3'."
  usage
fi

while getopts ":prscatdgkbmnh" opt; do
  case "${opt}" in
    p) install_pacman_packages ;;
    r) install_aur_packages ;;
    s) install_suckless_software ;;
    c) copy_dotfiles ;;
    a) run_all_options ;;
    t) prepare_touchpad ;;
    g) git_config ;;
    k) keyboard_backlight ;;
    d) download_softwares ;;
    b) secure_boot ;;
    m) change_grub ;;
    n) setup_systemd_resolved ;;
    h) disable_telemetry ;;
    *) usage ;;
  esac
done